
# File names which should be inputs to this benchmark.
# Unix-style globbing is supported.
input:
    path: 'runs/*/*/*/*_blackscholes_*.out'
    filter:
        'Native-C-(S?VML)(.*)$': '\1\2Native-C'
        'Numba@jit-loop-par': 'numba'
        'Numba@jit-loop': 'numba'
        '^ERF: ([^\s]+): Size: ([\d]+) MOPS: ([\d.]+) ?([^\s]+)$': '\1, \2, \3, \4'
        "Using": drop

    # Format of input files
    format: csv
    csv-header: 'Implementation, Size, MOPS, Prefix'

# Aggregation method (e.g. min, median, max, mean)
aggregation: mean

# Axis and series column names
axis:
    - Size

series:
    - Prefix
    - Implementation
    - Accuracy

variants:
    - Mode
    - Arch

# Are higher values better?
higher-is-better: true

# Value columns
values:
    - MOPS

# Precompute columns using lambda functions
precomputed:
    Mode: "'Serial' if row['File'].split('.')[1].split('_')[-1] == 'seq' else 'Parallel'"
    Arch: "(row['Directory'].split('/')[-3].split('_')[-3:-2]+['Unknown'])[0]"
    Prefix: "row['Prefix'] if row['Prefix'] else 'Native-C'"
    Accuracy: "row['acc'] if row['Prefix'] == 'Native-C' else 'ha'"

# Number format in Python str.format() style, or the number of digits of
# precision to show in numbers in pretty-printed pivot tables
number-format: 2

# Do we figure out the number of decimals only once, using the max value,
# and disregard smaller precision numbers?
number-format-max-only: false

